<%# 
  Generic data table partial - works for any tabular data
  Parameters:
  - data: Array of data entries to display
  - columns: Array of column definitions with keys: :key, :label, :class, :type, :render, :width (optional)
  - show_pagination: Boolean to show/hide pagination (default: true)
  - table_id: Custom ID for the table (default: 'data-table')
  - selectable: Boolean to enable row selection (default: false)
  - expandable: Boolean to enable row expansion (default: false)
  - title: Table title (optional)
  - total_count: Total count for pagination display (default: data.length)
  - empty_message: Custom message when no data (default: "No data found")
  - empty_icon: Icon for empty state (default: "table")
  - expand_content: Proc/lambda for custom expanded content (optional)
  - row_class: Proc/lambda that returns CSS classes for each row based on data (optional)
  - pagination_config: Hash with pagination settings like { current_page: 1, total_pages: 5, per_page: 20 } (optional)
%>

<%
  data ||= []
  columns ||= []
  show_pagination = local_assigns[:show_pagination] != false
  table_id = local_assigns[:table_id] || 'data-table'
  selectable = local_assigns[:selectable] == true
  expandable = local_assigns[:expandable] == true
  title = local_assigns[:title]
  total_count = local_assigns[:total_count] || data.length
  empty_message = local_assigns[:empty_message] || "No data found"
  empty_icon = local_assigns[:empty_icon] || "table"
  row_class = local_assigns[:row_class]
  pagination_config = local_assigns[:pagination_config]
%>

<div class="bg-white rounded-xl shadow-sm">
  <% if title %>
    <div class="p-6 border-b border-gray-100">
      <div class="flex justify-between items-center">
        <h3 class="text-lg font-semibold text-yellow-700"><%= title %></h3>
        <div class="flex items-center space-x-2">
          <p class="text-sm text-gray-500">
            <%= data.length %> <%= data.length == 1 ? 'item' : 'items' %>
          </p>
        </div>
      </div>
    </div>
  <% end %>
  
  <!-- Table header -->
  <div class="grid text-xs font-medium text-gray-500 uppercase py-3 px-6 border-b border-gray-100" 
       style="grid-template-columns: <%= columns.map { |col| col[:width] || '1fr' }.join(' ') %>">
    <% columns.each_with_index do |column, index| %>
      <div class="<%= column[:header_class] || 'flex items-center' %>">
        <% if selectable && index == 0 %>
          <input type="checkbox" class="mr-2 rounded border-gray-300" id="selectAll-<%= table_id %>">
        <% end %>
        <span><%= column[:label] %></span>
      </div>
    <% end %>
  </div>
  
  <!-- Table content -->
  <div class="divide-y divide-gray-100">
    <% if data.empty? %>
      <div class="py-12 text-center">
        <i data-lucide="<%= empty_icon %>" class="w-12 h-12 text-gray-300 mx-auto mb-4"></i>
        <p class="text-gray-500"><%= empty_message %></p>
      </div>
    <% else %>
      <% data.each_with_index do |item, row_index| %>
        <div class="table-row">
          <div class="grid py-3 px-6 text-sm items-center hover:bg-gray-50 <%= 'cursor-pointer' if expandable %> <%= row_class.call(item, row_index) if row_class %>"
               style="grid-template-columns: <%= columns.map { |col| col[:width] || '1fr' }.join(' ') %>"
               <%= "onclick=\"toggleRowExpansion('#{table_id}-#{row_index}')\"" if expandable %>>
            
            <% columns.each_with_index do |column, col_index| %>
              <div class="<%= column[:class] %>">
                <% if selectable && col_index == 0 %>
                  <div class="flex items-center">
                    <input type="checkbox" class="mr-2 rounded border-gray-300 row-checkbox" 
                           value="<%= row_index %>" onclick="event.stopPropagation();">
                    <div>
                <% end %>
                
                <% if column[:render] %>
                  <%= column[:render].call(item, row_index) %>
                <% else %>
                  <% value = item.is_a?(Hash) ? item[column[:key]] : item.send(column[:key]) %>
                  <% case column[:type] %>
                  <% when :date %>
                    <%= Date.parse(value.to_s).strftime("%m/%d/%Y") rescue value %>
                  <% when :datetime %>
                    <div>
                      <p class="font-mono text-xs text-gray-600">
                        <%= Date.parse(value.to_s).strftime("%m/%d/%Y") rescue value %>
                      </p>
                      <p class="font-mono text-xs text-gray-500">
                        <%= Time.parse(value.to_s).strftime("%l:%M:%S %p") rescue '' %>
                      </p>
                    </div>
                  <% when :badge %>
                    <span class="px-2 py-1 text-xs font-medium rounded-full border bg-gray-100 text-gray-700 border-gray-200">
                      <%= value %>
                    </span>
                  <% when :boolean %>
                    <% if value %>
                      <i data-lucide="check-circle" class="w-4 h-4 text-green-600"></i>
                    <% else %>
                      <i data-lucide="x-circle" class="w-4 h-4 text-red-600"></i>
                    <% end %>
                  <% when :truncate %>
                    <p class="truncate" title="<%= value %>"><%= value %></p>
                  <% else %>
                    <%= value %>
                  <% end %>
                <% end %>
                
                <% if selectable && col_index == 0 %>
                    </div>
                  </div>
                <% end %>
              </div>
            <% end %>
          </div>

          <% if expandable %>
            <!-- Expanded Details -->
            <div class="row-details" id="details-<%= table_id %>-<%= row_index %>" style="display: none;">
              <div class="px-6 pb-4 bg-gray-50 border-t">
                <% if local_assigns[:expand_content] %>
                  <%= local_assigns[:expand_content].call(item, row_index) %>
                <% else %>
                  <div class="pt-4">
                    <h4 class="font-semibold text-gray-800 mb-3">Details</h4>
                    <div class="bg-white rounded-lg p-3">
                      <pre class="text-xs text-gray-700 whitespace-pre-wrap"><%= JSON.pretty_generate(item) %></pre>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% end %>
    <% end %>
  </div>
  
  <% if show_pagination && !data.empty? %>
    <div class="p-6 border-t border-gray-100 flex justify-between">
      <p class="text-sm text-gray-500">
        <% if pagination_config %>
          Showing <%= ((pagination_config[:current_page] - 1) * pagination_config[:per_page] + 1) %> 
          to <%= [pagination_config[:current_page] * pagination_config[:per_page], total_count].min %> 
          of <%= total_count %> <%= total_count == 1 ? 'item' : 'items' %>
        <% else %>
          Showing <%= data.length %> of <%= total_count %> <%= data.length == 1 ? 'item' : 'items' %>
        <% end %>
      </p>
      <div class="flex">
        <% if pagination_config %>
          <!-- Smart pagination with config -->
          <% current_page = pagination_config[:current_page] || 1 %>
          <% total_pages = pagination_config[:total_pages] || 1 %>
          <% base_url = pagination_config[:base_url] || request.path %>
          <% params_hash = pagination_config[:params] || {} %>
          
          <!-- Previous button -->
          <% if current_page > 1 %>
            <a href="<%= base_url %>?<%= params_hash.merge(page: current_page - 1).to_query %>" 
               class="px-3 py-1 border border-gray-200 rounded-l-lg text-sm text-gray-600 hover:bg-gray-50">
              Previous
            </a>
          <% else %>
            <span class="px-3 py-1 border border-gray-200 rounded-l-lg text-sm text-gray-400 cursor-not-allowed">
              Previous
            </span>
          <% end %>
          
          <!-- Page numbers -->
          <% start_page = [current_page - 2, 1].max %>
          <% end_page = [start_page + 4, total_pages].min %>
          <% start_page = [end_page - 4, 1].max if end_page - start_page < 4 %>
          
          <% (start_page..end_page).each do |page| %>
            <% if page == current_page %>
              <span class="px-3 py-1 bg-yellow-700 text-white text-sm">
                <%= page %>
              </span>
            <% else %>
              <a href="<%= base_url %>?<%= params_hash.merge(page: page).to_query %>" 
                 class="px-3 py-1 border-y border-r border-gray-200 text-sm text-gray-600 hover:bg-gray-50">
                <%= page %>
              </a>
            <% end %>
          <% end %>
          
          <!-- Next button -->
          <% if current_page < total_pages %>
            <a href="<%= base_url %>?<%= params_hash.merge(page: current_page + 1).to_query %>" 
               class="px-3 py-1 border-y border-r border-gray-200 text-sm text-gray-600 rounded-r-lg hover:bg-gray-50">
              Next
            </a>
          <% else %>
            <span class="px-3 py-1 border-y border-r border-gray-200 text-sm text-gray-400 rounded-r-lg cursor-not-allowed">
              Next
            </span>
          <% end %>
        <% else %>
          <!-- Fallback to content_for or default pagination -->
          <%= content_for :pagination if content_for?(:pagination) %>
          <% unless content_for?(:pagination) %>
            <button class="px-3 py-1 border border-gray-200 rounded-l-lg text-sm text-gray-600">Previous</button>
            <button class="px-3 py-1 bg-yellow-700 text-white text-sm">1</button>
            <button class="px-3 py-1 border-y border-r border-gray-200 text-sm text-gray-600">2</button>
            <button class="px-3 py-1 border-y border-r border-gray-200 text-sm text-gray-600 rounded-r-lg">Next</button>
          <% end %>
        <% end %>
      </div>
    </div>
  <% end %>
</div>

<% if expandable %>
  <script>
    function toggleRowExpansion(rowId) {
      const detailsDiv = document.getElementById('details-' + rowId);
      
      if (detailsDiv.style.display === 'none') {
        detailsDiv.style.display = 'block';
      } else {
        detailsDiv.style.display = 'none';
      }
    }
  </script>
<% end %>

<% if selectable %>
  <script>
    // Handle select all checkbox
    document.getElementById('selectAll-<%= table_id %>').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('.row-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
    });
    
    // Handle individual checkboxes
    document.querySelectorAll('.row-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        const checkedCheckboxes = document.querySelectorAll('.row-checkbox:checked');
        const selectAllCheckbox = document.getElementById('selectAll-<%= table_id %>');
        
        if (checkedCheckboxes.length === allCheckboxes.length) {
          selectAllCheckbox.checked = true;
          selectAllCheckbox.indeterminate = false;
        } else if (checkedCheckboxes.length > 0) {
          selectAllCheckbox.checked = false;
          selectAllCheckbox.indeterminate = true;
        } else {
          selectAllCheckbox.checked = false;
          selectAllCheckbox.indeterminate = false;
        }
      });
    });
  </script>
<% end %>
